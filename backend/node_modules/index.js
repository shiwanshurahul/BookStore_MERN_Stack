import express from "express";
import { PORT, mongoDBURL } from "./config.js"
import mongoose from "mongoose";   //allows developers to interact with MongoDB databases in an easier and more organized manner.
import { Book } from "../models/bookModel.js";
import booksRoute from './routes/booksRoute.js';


const app = express();

//Middleware for parsing request body
app.use(express.json());  

//cors-> when webpage sends request to a different domain, browser sends request to target server, server check if the req is permitted or not by checking origin, methods and headers
// middleware for handling CORS policy:
// opt 1) Allow all origins with default of cors()
app.use(cors());
//opt 2) Allow custom origins ->only the clients with this origin can access this server
// app.use(
//     cors({
//         origin: 'http:localhost:3000' ,
//         methods: ['GET','POST','PUT','DELETE'],
//         allowedHeaders: ['Content-Type'],
//     })
//     );


app.get('/', (req,res) => {  //route
    console.log(req);
    return res.status(234).send('Welcone to MERN project');   // It sets the HTTP status code to 234 using res.status(234) and sends the reponse to client
});  //get method is used to get a resource from server

//HU7FlGkuE1CLbIdH

app.use('/books', booksRoute);  //middleware -> booksRoute would typically contain a set of route definitions and handlers for paths starting with /books.

// app.listen(PORT, () => {     //mongoose connect me use krlo
//     console.log(`App is listening to port: ${PORT}`)
// });



//Route for Save a new Book
// app.post('/books', async (req, res) => {
//     try {   //req hm postman se bhijwa rhe
//         if (!req.body.title || !req.body.author || !req.body.publishYear){
//             return res.status(400).send({
//                 message: 'send all required fields: title, author, publishYear',
//             });
//         }
//         const newBook = {
//             title: req.body.title,
//             author: req.body.author,
//             publishYear: req.body.publishYear,
//         };
//         const book = await Book.create(newBook); // or Book.save(newBook) 
//         return res.status(201).send(book);
//     }
//     catch (error){
//         console.log(error.message);
//         res.status(500).send({message: error.message});  // // status code 500 (Internal Server Error)
//     }
// });
// //for testing a post method, we can't use post method , so we will use postman  


// //route to get all books from database
// app.get('/books', async (req,res) => {
//     try {
//         const books = await Book.find({});  // get all documents in the database
//         return res.status(200).json(books); //sending books to the client
//     } catch(error){
//         console.log(error.message);
//         res.status(500).send({ meesage: error.message});   
//     }
// });

// //route to get one book frm database by id
// app.get('/books/:id', async (req,res) => {
//     try {

//         const { id } = req.params;

//         const books = await Book.findByID({id});
//         return res.status(200).json(books); //sending book to the client => status code 200 (OK)
//     } catch(error){
//         console.log(error.message);
//         res.status(500).send({ meesage: error.message});
//     }
// });

// //route for update a Book
// app.put('/books/:id', async (req,res) => {
//     try{  
//         if(!req.body.title || !req.body.author || !req.body.publishYear){
//             return res.status(400).send({
//                 message: 'send all required fields: title, author, publishYear',
//             });
//          }

//          const { id } = req.params;
//          const result = await Book.findByIDAndUpdate(id, req.body);  // findByIdAndUpdate() to find the book by its ID and update it with the data from req.body.


//     } catch (error) {
//         console.log(error.message);
//         res.status(500).send({message : error.message});
//     }
// });

// //route for delete a book
// app.delete('/books/:id', async(req,res) => {
//     try{
//         const {id} = req.params;
//         const result = await Book.findByIDAndDelete(id);

//         if(!result){
//             return res.status(404).json({message: 'Book not found'});
//         }
//          else{
//             return res.status(200).json({message: 'Book deleted successfully'});
//          }
//     } catch (error){
//         console.log(error.message);
//         res.status(500).send({message: error.message})
//     }
// });

mongoose  // to connect to mongodb database
    .connect(mongoDBURL)
    .then(() => {
        console.log('App connected to database');
        app.listen(PORT, () => {
            console.log(`App is listening to port: ${PORT}`)
        });
    })
    .catch ((error) => {
        console.log(error);
    });




//Here's a basic overview of how it works:

// Client sends a request: The client (here postman) (e.g., a web browser, a mobile app) sends an HTTP request to the server.

// Request includes data: If the request is a POST, PUT, or PATCH request, it may include data in the body of the request. For example, if the client is submitting a form, the form data is sent in the request body.

// Server parses the request body: In your Express.js application, middleware like body-parser or express.json() is used to parse the request body and make its contents available in the req.body object.

// Accessing request body: Inside your route handlers or middleware functions, you can access the parsed request body using req.body.